"""
lb_test.py â€” Test de loadâ€‘balancing para imageâ€‘msâ€‘lb

Este script:
 1) Inicia un tail de logs en background para el servicio Docker Compose `image-ms`.
 2) Espera un par de segundos para estabilizar el tail.
 3) Lanza N peticiones concurrentes a la URL del balanceador.
 4) Espera a que terminen todas las peticiones.
 5) Da unos segundos extra para que los logs reflejen el trÃ¡fico.
 6) Termina el proceso de tail de logs.
"""

import subprocess
import time
import requests
import concurrent.futures
import sys
import os
import signal

# 1) URL de tu loadâ€‘balancer para imageâ€‘ms
LB_URL = "http://localhost:83/Image/user/1"

# 2) Servicio de Docker Compose a tailâ€‘ear
SERVICE = "image-ms"

# 3) NÃºmero de peticiones a generar
COUNT = 1000

def send_request(url: str):
    """EnvÃ­a una GET a la URL y descarta la respuesta."""
    try:
        requests.get(url, timeout=5)
    except Exception:
        pass  # ignoramos errores

def main():
    # 3.1) Arrancamos el tail de logs en background
    print(f"ðŸ“„ Iniciando tail de logs del servicio '{SERVICE}'â€¦")
    log_proc = subprocess.Popen(
        ["docker", "compose", "logs", "-f", SERVICE],
        stdout=sys.stdout,
        stderr=sys.stderr
    )

    # 4) PequeÃ±a espera para asegurar que el tail estÃ¡ activo
    time.sleep(2)

    # 5) Lanzamos las peticiones concurrentes
    print(f"ðŸš€ Lanzando {COUNT} peticiones a {LB_URL}")
    with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:
        # map espera a que todas las llamadas terminen
        list(executor.map(lambda _: send_request(LB_URL), range(COUNT)))

    # 6) Un par de segundos mÃ¡s para que aparezcan los Ãºltimos logs
    time.sleep(2)

    # 7) Detenemos el tail de logs
    print("ðŸ›‘ Deteniendo tail de logs")
    # Enviamos SIGINT primero para un cierre mÃ¡s limpio
    log_proc.send_signal(signal.SIGINT)
    # si sigue vivo, forzamos
    time.sleep(1)
    if log_proc.poll() is None:
        log_proc.kill()

    print("âœ… Â¡Prueba completada!")

if __name__ == "__main__":
    main()
