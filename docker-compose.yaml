services:
  recipy-frontend:
    build:
      context: ./recipy-frontend
      dockerfile: Docker/development/Dockerfile
    ports:
      - "3000:3000"
      - "9229:9229" # Debugging
      - "9230:9230" # Debugging
    volumes:
      - ./recipy-frontend/src:/app/src
    env_file:
      - .env
  
  recipe-ms:
    build:
      context: ./recipe-ms
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./recipe-ms/app:/app/app
    env_file:
      - .env
    depends_on:
      - recipe-db
    
  userauth-db:
    image: postgres:17.5-alpine3.21
    networks:
      - backend
    container_name: userauth-db
    restart: always
    env_file:
      - .env
    volumes:
      - ./userauth-db/data:/var/lib/postgresql/data # Persistencia de datos
      - ./userauth-db/initdb:/docker-entrypoint-initdb.d # Comando de inicialización
    ports:
      - "5432:5432"
  recipe-db:
    image: mongo:6
    container_name: recipe-db
    restart: always
    env_file:
      - .env
    volumes:
      - ./recipe-db/data:/data/db  # Persistencia de datos
      - ./recipe-db/initdb:/docker-entrypoint-initdb.d:ro # Comando de inicialización
    ports:
      - "27018:27017"    # mapea 27018 en el host al 27017 del contenedor

  userauth-ms:
    build:
      context: ./userauth-ms
      dockerfile: Dockerfile
    container_name: userauth-ms
    ports:
      - "5000:5000"
    env_file:
      - .env
    depends_on:
      - userauth-db

  userauth_postgrest:
    image: postgrest/postgrest:v13.0.0
    container_name: userauth_postgrest
    networks:
      - backend
    restart: always
    environment:
      - PGRST_DB_URI=${PGRST_USERS_DB_URI}
      - PGRST_DB_SCHEMA=${PGRST_USERS_DB_SCHEMA}
      - PGRST_DB_ANON_ROLE=${PGRST_USERS_DB_ANON_ROLE}
      - PGRST_SERVER_PORT=${PGRST_USERS_SERVER_PORT}
    volumes:
      - ./data/postgrest.conf:/etc/postgrest.conf
    ports:
      - "3001:3000"
    depends_on:
      - userauth-db

networks:
  backend: