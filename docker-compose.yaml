services:
  # Frontend (Next.js)
  recipy-frontend:
    build:
      context: ./recipy-frontend
      dockerfile: Docker/development/Dockerfile
    ports:
      - "3000:3000"
      - "9229:9229" # Debugger
      - "9230:9230" # Debugger
    volumes:
      - ./recipy-frontend/src:/app/src
    env_file:
      - .env
    networks:
      - frontend
  # Recipe micro-service (FastAPI/Uvicorn)
  recipe-ms:
    build:
      context: ./recipe-ms
      dockerfile: Dockerfile
    container_name: recipe-ms
    ports:
      - "8000:8000"
    volumes:
      - ./recipe-ms/app:/app/app
    env_file:
      - .env
    depends_on:
      - recipe-db
      - recipy-cache
    networks:
      - backend

  # Redis para cache
  recipy-cache:
    image: redis:7
    container_name: recipy-cache
    restart: always
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend

  # API que expone cache sobre Redis
  recipe-cache:
    build:
      context: ./recipy-cache
      dockerfile: Dockerfile
    container_name: recipe-cache-api
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      - recipy-cache
    networks:
      - backend

  # MongoDB for recipes
  recipe-db:
    image: mongo:6
    container_name: recipe-db
    restart: always
    env_file:
      - .env
    volumes:
      - ./recipe-db/data:/data/db
      - ./recipe-db/initdb:/docker-entrypoint-initdb.d:ro
    ports:
      - "27018:27017"
    networks:
      - backend

  # PostgreSQL for user-auth
  userauth-db:
    image: postgres:17.5-alpine3.21
    container_name: userauth-db
    restart: always
    env_file:
      - .env
    volumes:
      - ./userauth-db/data:/var/lib/postgresql/data
      - ./userauth-db/initdb:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - backend

# PostgreSQL for userauth-tokens
  token-db:
    build:
      context: ./token-db
      dockerfile: Dockerfile
    container_name: token-db
    restart: always
    env_file:
      - .env
    environment:
      # Estas tres variables son las que usa postgres:17.5-alpine para crear la BD
      POSTGRES_USER:   ${TOKEN_DB_USER}
      POSTGRES_PASSWORD: ${TOKEN_DB_PASSWORD}
      POSTGRES_DB:     ${TOKEN_DB_NAME}
    volumes:
      - ./token-db/data:/var/lib/postgresql/data
      - ./token-db/initdb:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"
    networks:
      - backend

  # PostgREST for user-auth
  userauth-postgrest:
    image: postgrest/postgrest:v13.0.0
    container_name: userauth-postgrest
    restart: always
    env_file:
       - .env
    volumes:
      - ./userauth-postgrest/postgrest.conf:/etc/postgrest.conf:ro
      #- ./recipe-db/data:/data/db  # Persistencia de datos
      #- ./recipe-db/initdb:/docker-entrypoint-initdb.d:ro # Comando de inicialización
    
    ports:
      - "3001:3000"
    depends_on:
      - userauth-db
    networks:
      - backend

  # Custom Flask + PostgREST orchestrator
  userauth-ms:
    build:
      context: ./userauth-ms
    env_file:
      - .env     # Apunta al .env de la raíz
    ports:
      - "5000:5000"   
    depends_on:
      - userauth-postgrest
      - token-db
    networks:
      - backend

  # API Gateway (Nest + Express + HTTP-Proxy-Middleware)
  recipy-ag:
    build:
      context: ./recipy-ag
    env_file:
      - .env
    ports:
      - "3030:3030"
    depends_on:
      - userauth-ms
      - recipe-ms
    networks:
      - backend
      - frontend
  
  # Image MS (ASP.NET Core Web API)
  image-ms:
    build:
      context: ./image-ms
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - ./image-ms/image-uploads:/app/wwwroot/uploads
    networks:
      - backend

  recipy-rp-app:
    image: nginx:alpine
    container_name: recipy-rp-app
    volumes:
      - ./recipy-rp-app/default.conf.template:/etc/nginx/conf.d/default.conf.template
      - ./recipy-rp-app/entrypoint.sh:/entrypoint.sh
      - ./recipy-rp-app/nginx.conf:/etc/nginx/nginx.conf
      - ./certs/recipy.crt:/etc/ssl/certs/recipy.crt
      - ./certs/recipy.key:/etc/ssl/private/recipy.key
    ports:
      - "81:80" # Aquí tocó poner 81 y 444 ya que tenemos otro nginx, y perdon por priorizar el front antes que el back Jhon, se que te duele
      - "444:443"
    env_file:
      - .env
    entrypoint: ["/entrypoint.sh"]
    depends_on:
      - recipy-waf
    networks:
      - frontend

  recipy-rp-frontend:
    image: nginx:alpine
    container_name: recipy-rp-frontend
    volumes:
      - ./recipy-rp-frontend/default.conf.template:/etc/nginx/conf.d/default.conf.template
      - ./recipy-rp-frontend/entrypoint.sh:/entrypoint.sh
      - ./recipy-rp-frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./certs/recipy.crt:/etc/ssl/certs/recipy.crt
      - ./certs/recipy.key:/etc/ssl/private/recipy.key
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    entrypoint: ["/entrypoint.sh"]
    depends_on:
      - recipy-frontend
    networks:
      - frontend

  recipy-waf:
    image: owasp/modsecurity-crs:nginx-alpine
    container_name: recipy-waf
    #volumes:
    #  - ./recipy-waf/rules:/etc/modsecurity.d/owasp-crs/rules:ro # Este volumen por alguna razón no funciona, iguamente usaremos las reglas por defecto de OWASP CRS
    depends_on:
      - recipy-ag
    environment:
      BACKEND: "http://recipy-ag:3030" #Esta es la forma en que se pone la variable de entorno en el contenedor, no se puede usar el .env lastimosamente
    networks:
      - frontend

  # Servicio de desarrollo para captura y testing de correos
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # UI web
    networks:
      - backend


  # Servicio de correo asíncrono
  mail-ms:
    build:
      context: ./mail-ms
      dockerfile: Dockerfile
    ports:
      - "8085:8080"
    env_file:
      - .env      # Carga MAIL_SMTP_* y AMQP_URL
    depends_on:
      - mail-broker
    networks:
      - backend
    restart: always

  # Broker de mensajes (RabbitMQ)
  mail-broker:
    image: rabbitmq:3-management
    container_name: mail-broker
    restart: always
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      backend:
        aliases:
          - rabbitmq   # para tests de userauth-ms


volumes:
  rabbitmq_data:
  redis-data:

networks:
  frontend:
  backend:
    driver: bridge

