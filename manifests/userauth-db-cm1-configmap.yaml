apiVersion: v1
data:
  01-init_recipy.sql: |+
    CREATE EXTENSION IF NOT EXISTS pgcrypto;

    -- 1. Esquema de la base de datos (opcional)
    CREATE SCHEMA IF NOT EXISTS recipy;
    SET search_path = recipy;

    -- 2. Tabla de usuarios
    CREATE TABLE IF NOT EXISTS users (
      id SERIAL PRIMARY KEY,
      name            VARCHAR(100) NOT NULL,
      email           VARCHAR(200) UNIQUE NOT NULL,
      creation_date   TIMESTAMP     DEFAULT NOW(),
      username        VARCHAR(50)   UNIQUE NOT NULL,  -- Nombre público en la plataforma
      profile_picture TEXT,                          -- URL de la imagen de perfil
      biography       TEXT,                          -- Descripción breve del usuario
      location        VARCHAR(100),                  -- Ciudad o país
      birth_date      DATE,                          -- Para segmentación y edad del usuario
      role            VARCHAR(50)   DEFAULT 'user',  -- Puede ser user, admin, chef, etc.
      password_hash   TEXT          NOT NULL         -- Contraseña en formato seguro
    );

    -- 3. Tabla de relaciones "siguiendo / seguido"
    CREATE TABLE IF NOT EXISTS relation (
      id            SERIAL PRIMARY KEY,
      user_id       INT NOT NULL,     -- quien sigue
      following_id  INT NOT NULL,     -- a quién sigue
      follow_date   TIMESTAMP DEFAULT NOW(),

      CONSTRAINT fk_user
        FOREIGN KEY(user_id) REFERENCES users(id)
        ON DELETE CASCADE,

      CONSTRAINT fk_following
        FOREIGN KEY(following_id) REFERENCES users(id)
        ON DELETE CASCADE,

      CONSTRAINT unq_relation
        UNIQUE(user_id, following_id)  -- evita duplicados
    );

    -- 4. Índices para optimizar conteos
    CREATE INDEX idx_relation_following
      ON relation(following_id);

    CREATE INDEX idx_relation_user
      ON relation(user_id);





  02-auth-users-for-postgREST.sql: |+
    /*
    -- ALTER TABLE recipy.users ENABLE ROW LEVEL SECURITY;  -- para futuros prototipos


    -- 0.2. Política: cada usuario sólo puede actualizar su propia fila (RLS futuro)
    CREATE POLICY users_update_own
      ON recipy.users
      FOR UPDATE
      TO web_anon
      USING ( id = current_setting('request.jwt.claims.sub')::int );

    -- Grant que permitiría aplicar la política
    GRANT UPDATE ON recipy.users TO web_anon;
    */

    -- 0. Activa la extensión de cifrado
    CREATE EXTENSION IF NOT EXISTS pgcrypto;

    -- 1. Crea el rol web_anon y dale permisos de lectura + update
    BEGIN;
      -- rol que usará PostgREST para peticiones sin token
      CREATE ROLE web_anon NOLOGIN;

      -- permisos en el esquema
      GRANT USAGE ON SCHEMA recipy TO web_anon;

      -- permisos en tablas
      GRANT SELECT ON ALL TABLES IN SCHEMA recipy TO web_anon;
      GRANT UPDATE ON recipy.users TO web_anon;
    COMMIT;

    -- 2. Crear el rol authenticator y hereda web_anon
    BEGIN;
      CREATE ROLE authenticator LOGIN PASSWORD 'password_t';
      GRANT web_anon TO authenticator;
    COMMIT;

    -- 3. Función RPC para registro de usuarios
    --    Se ejecuta como dueño de la función (SECURITY DEFINER)
    CREATE OR REPLACE FUNCTION recipy.register_user(
        _email    TEXT,
        _name     TEXT,
        _password TEXT,
        _username TEXT
    ) RETURNS TABLE(id INT)
    LANGUAGE plpgsql
    SECURITY DEFINER
    AS $$
    BEGIN
        RETURN QUERY
        INSERT INTO recipy.users(
            name, email, username, password_hash
        )
        VALUES (
            _name, _email, _username,
            crypt(_password, gen_salt('bf'))
        )
        RETURNING users.id;
    END;
    $$;

    -- 4. Conceder permiso de ejecución de la función
    GRANT EXECUTE
      ON FUNCTION recipy.register_user(TEXT, TEXT, TEXT, TEXT)
      TO web_anon, authenticator;

kind: ConfigMap
metadata:
  labels:
    io.kompose.service: userauth-db
  name: userauth-db-cm1
