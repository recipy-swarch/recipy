# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name localhost;

    return 301 https://\$host\$request_uri;
}

# HTTPS server
server {
    listen 443 ssl;
    server_name localhost;

    # SSL certs (montados desde ./certs/recipy.crt y recipy.key)
    ssl_certificate     /etc/ssl/certs/recipy.crt;
    ssl_certificate_key /etc/ssl/private/recipy.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # üõ°Ô∏è Headers de seguridad
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header Content-Security-Policy "
            default-src 'self';
            script-src 'self' 'unsafe-inline' 'unsafe-eval';
            style-src 'self' 'unsafe-inline';
            img-src 'self' data: blob:;
            font-src 'self' data:;
            connect-src 'self' https://* http://* ws://* wss://*;
            media-src 'self' blob:;
            object-src 'none';
            frame-ancestors 'none';
            " always;


    # 1) Rutas est√°ticas de Next no limitadas
    location ^~ /_next/ {
        proxy_pass ${FRONTEND_URL};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # 2) Resto de rutas con rate-limiting
    location / {
        limit_req zone=myzone burst=20 nodelay;  # ajusta burst a tus necesidades
        proxy_pass ${FRONTEND_URL};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        proxy_cache frontend_cache;
        proxy_cache_valid 200 1m; # Cachea respuestas 200 por 1 minuto
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        add_header X-Cache-Status \$upstream_cache_status;
    }
}


